/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edinburgh;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.HashMap;
import java.util.List;
import javax.swing.JRootPane;

/**
 *
 * @author Jamie
 */
public class MainClient extends javax.swing.JFrame {

    //Declare the server socket and communication variables
    private static Socket requestSocket;
    private static ObjectOutputStream out;
    private static ObjectInputStream in;
    private static MessageObj message;
    //A condition to check whether or not the client is connected before it sends a message when the user presses the button
    public Boolean isConnected;
    private SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
    private static String username = "";
    private static String timestamp;
    private static Calendar time;
    private static MessageObj incoming;
    private static String remoteAddress = "";
    private static int messagesSent = 0;
    private boolean autoCorrect = false;
    private boolean annoying = true;
    private int failed = 0;
    private static boolean validAddress = false;
    private static WordStatistics wordStats;

    /**
     * Creates new form GUI
     */
    public MainClient() {
        initComponents();
        JRootPane pane = this.getRootPane();
        pane.setDefaultButton(sendButton);
        chatText.setEditable(false);
        messageTextBox.requestFocus();
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                closeWindow();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                                                    
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        messageTextBox = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        chatText = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitApp = new javax.swing.JMenuItem();
        getUserApp = new javax.swing.JMenuItem();
        changeNameApp = new javax.swing.JMenuItem();
        annoyingApp = new javax.swing.JMenuItem();
        autoCorrectApp = new javax.swing.JMenuItem();
        wordStatsApp = new javax.swing.JMenuItem();
        appPreferences = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INF1-OP Project");
        setBackground(new java.awt.Color(255, 255, 255));

        messageTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageTextBoxKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(messageTextBox);

        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        titleLbl.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(102, 102, 102));
        titleLbl.setText("Chat Client");

        chatText.setColumns(20);
        chatText.setRows(5);
        jScrollPane3.setViewportView(chatText);

        jMenu1.setText("File");



        exitApp.setText("Exit");
        exitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitAppActionPerformed(evt);
            }
        });
        jMenu1.add(exitApp);

        changeNameApp.setText("Change username");
        changeNameApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameAppActionPerformed(evt);
            }
        });
        jMenu1.add(changeNameApp);

        wordStatsApp.setText("Word statistics");
        wordStatsApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordStatsAppActionPerformed(evt);
            }
        });
        jMenu1.add(wordStatsApp);

        autoCorrectApp.setText("Auto correct");
        autoCorrectApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCorrectAppActionPerformed(evt);
            }
        });
        jMenu1.add(autoCorrectApp);

        annoyingApp.setText("Annoying mode");
        annoyingApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annoyingAppActionPerformed(evt);
            }
        });
        jMenu1.add(annoyingApp);

        getUserApp.setText("Who is in?");
        getUserApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUserAppActionPerformed(evt);
            }
        });
        jMenu1.add(getUserApp);

        jMenuBar1.add(jMenu1);

        appPreferences.setText("Edit");

        jMenuItem2.setText("Preferences");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        appPreferences.add(jMenuItem2);

        jMenuBar1.add(appPreferences);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton))
                .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(titleLbl)
                .addGroup(layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addComponent(titleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jScrollPane2)
                .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>                                           

    //Update the word count every time a new word is entered into the text box
    private void messageTextBoxKeyPressed(java.awt.event.KeyEvent evt) {
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(this, "Not yet implemented.");
    }

    //Triggered by the exit menu button
    private void exitAppActionPerformed(java.awt.event.ActionEvent evt) {
        closeWindow();
    }

    //Triggered by the get users menu button
    private void getUserAppActionPerformed(java.awt.event.ActionEvent evt) {
        getUsers();
    }

    //Triggered by the change name menu button
    private void changeNameAppActionPerformed(java.awt.event.ActionEvent evt) {
        String newName = "";
        newName = JOptionPane.showInputDialog("Choose a new username");
        if (newName != null) {
            if (!newName.equals("")) {
                changeName(newName);
                username = newName;
            }
        }

    }

    //Activates the auto correct mode
    private void activateAutoCorrect() {
        autoCorrect = true;
        annoying = false;
        failed = 0;
    }

    //Triggered by the auto correct menu button
    private void autoCorrectAppActionPerformed(java.awt.event.ActionEvent evt) {
        int response = JOptionPane.showConfirmDialog(this, "Would you like to run the client with autocorrect mode active?");
        switch (response) {
            case 0:
                activateAutoCorrect();
                break;
            case 1:
                autoCorrect = false;
                break;
            case 2:
                break;
        }
    }

    //Sends a logout message to the server and closes the window
    private void closeWindow() {
        //Send a disconnect message to the server
        MessageObj disconnect = new MessageObj(2, null, null, null);
        sendMessage(disconnect);
        //Exit the app
        System.exit(0);
    }

    //Triggered by the Annoying mode menu object
    private void annoyingAppActionPerformed(java.awt.event.ActionEvent evt) {
        int response = JOptionPane.showConfirmDialog(this, "Would you like to run the client in the annoying mode?");

        switch (response) {
            case 0:
                annoying = true;
                autoCorrect = false;
                break;
            case 1:
                annoying = false;
                break;
            case 2:
                break;
        }
    }

    //Triggered by the Word stats menu object
    private void wordStatsAppActionPerformed(java.awt.event.ActionEvent evt) {
    chatText.append(wordStats.getStats());
    }

    //Triggered when the user presses the send button
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {
        time = Calendar.getInstance();
        timestamp = timeFormat.format(time.getTime());
        //Create a message from user details and message text
        message = new MessageObj(1, messageTextBox.getText(), timestamp, username);

        if (!(message.getMsgText().equals(""))) {
            if (annoying) {
                if (goodGrammar(message.getMsgText())) {
                    sendMessage(message);
                    messageTextBox.setText("");
                    failed = 0;
                } else {
                    JOptionPane.showMessageDialog(this, "Your spelling is not good enough, please try again");
                    failed++;
                }

            } else {
                if (autoCorrect) {
                    message.setMsgText(correct(message.getMsgText()));
                }
                sendMessage(message);
                messageTextBox.setText("");
            }
            if (failed >= 3) {
                int response = JOptionPane.showConfirmDialog(this, "You seem to have some problem with your spelling, would you like to turn on the auto correction?");
                switch (response) {
                    case 0:
                        activateAutoCorrect();
                        failed = 0;
                        break;
                    case 1:
                        failed = 0;
                        break;
                    case 2:
                        failed = 0;
                        break;
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainClient().setVisible(true);
            }
        });

        //Prompt for the name of the computer where the server is running
        remoteAddress = JOptionPane.showInputDialog("Enter the name of the computer you want to connect to");
        evaluateAddress();
        while (!validAddress) {
            remoteAddress = JOptionPane.showInputDialog("You must enter a valid hostname");
            evaluateAddress();
        }

        //Prompt for username until at lest one character is entered
        username = JOptionPane.showInputDialog("Enter username:");
        evaluateUsername();
        while (username.equals("")) {
            username = JOptionPane.showInputDialog("You must choose a username!");
            evaluateUsername();
        }

        //Open a new socket to the server
        setMap();
        connect();
        login();
        listen();
    }

    //Closes the program if the username is null
    private static void evaluateUsername() {
        boolean isNull = !(username != null);
        if (isNull) {
            System.exit(0);
        }
    }

    //Closes the program if the address is null, otherwise checks that the string is not empty and contains only letters
    private static void evaluateAddress() {
        boolean notNull = (remoteAddress != null);
        if (notNull) {
            boolean nonEmpty = !(remoteAddress.equals(""));
            boolean containsOnlyLetters = true;
            for (int i = 0; i < remoteAddress.length() && containsOnlyLetters; i++) {
                containsOnlyLetters = Character.isLetter(remoteAddress.charAt(i));
            }
            validAddress = notNull && nonEmpty && containsOnlyLetters;
        } else {
            System.exit(0);
        }
    }

    //Checks if a string is capitalised and written using correct words
    private boolean goodGrammar(String message) {
        if (message.equals(correct(message))) {
            return true;
        } else {
            return false;
        }
    }

    //Swaps any known acronyms or misspellings to a proper word and then capitalises the string.
    private String correct(String msg) {
        for (String s : abbreviations) {
            msg = msg.replace(s, replacer.get(s));
        }
        msg = capitalise(msg);
        return msg;
    }

    //Changes the firt character of a string to uppercase if it is a lowercase letter
    private String capitalise(String msg) {
        if (Character.isLetter(msg.charAt(0)) && Character.isLowerCase(msg.charAt(0))) {
            msg = Character.toUpperCase(msg.charAt(0)) + msg.substring(1);
        }

        return msg;
    }

    //Changes your username
    private void changeName(String username) {
        MessageObj namechanger = new MessageObj(3, null, null, username);
        sendMessage(namechanger);
    }

    //Requests a list of currently logged in users from the server
    private void getUsers() {
        MessageObj nameRequester = new MessageObj(0, null, null, null);
        sendMessage(nameRequester);
    }

    //Sends a login message to the server telling the server that you have connected
    private static void login() {
        MessageObj loginMsg = new MessageObj(4, null, null, username);
        sendMessage(loginMsg);
    }

    //Listen for incoming messages
    private static void listen() throws IOException {

        while (true) {
            try {
                incoming = (MessageObj) in.readObject();
                chatText.append(incoming.makeString() + "\n");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    //Method to connect to the server
    public static void connect() {
        try {
            //1. creating a socket to connect to the server
            requestSocket = new Socket(remoteAddress, 2004);
            System.out.println("Connected to " + remoteAddress + " in port 2004");
            //2. get Input and Output streams
            out = new ObjectOutputStream(requestSocket.getOutputStream());
            out.flush();
            in = new ObjectInputStream(requestSocket.getInputStream());

        } catch (UnknownHostException unknownHost) {
            System.err.println("You are trying to connect to an unknown host, please check your hostname and run the client again.");
            System.exit(0);
        } catch (IOException ioException) {
            System.err.println("Connection was refused by the hostname, please check your hostname and run the client again.");
            System.exit(0);
        }
    }

    //Close all streams and the socket
    public static void disconnect() {
        try {
            in.close();
            out.close();
            requestSocket.close();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    //Send a message to the server
    public static void sendMessage(MessageObj msg) {
        try {
            
            if (msg.getMsgType()==1){
                wordStats.addString(msg.getMsgText());
            }
            out.writeObject(msg);
            out.flush();
            //chatText.append(msg.makeString() + "\n");
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }
    // Variables declaration - do not modify                                          
    private javax.swing.JMenu appPreferences;
    private static javax.swing.JTextArea chatText;
    private javax.swing.JMenuItem exitApp;
    private javax.swing.JMenuItem getUserApp;
    private javax.swing.JMenuItem changeNameApp;
    private javax.swing.JMenuItem autoCorrectApp;
    private javax.swing.JMenuItem annoyingApp;
    private javax.swing.JMenuItem wordStatsApp;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField messageTextBox;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration
    //List of common abbreviations and acronyms that will be replaced by auto correct
    private String[] abbreviations = {
        "thx", "btw", "omg", "afk", "asap", "msg",
        " u ", " u.", " u?", " u!", " u,",
        " i ", " i.", " i?", " i!", " i,", " im ",
        " r ", " r.", " r?", " r!", " r,",};
    private static HashMap<String, String> replacer = new HashMap();

    //Sets the HashMap to map each element in 'abbreviations' to the replacing word
    private static void setMap() {
        replacer.put("thx", "thanks");
        replacer.put("btw", "by the way");
        replacer.put("omg", "oh my god");
        replacer.put("afk", "away from keyboard");
        replacer.put("asap", "as soon as possible");
        replacer.put("msg", "message");

        replacer.put(" u ", " you ");
        replacer.put(" u.", " you.");
        replacer.put(" u?", " you?");
        replacer.put(" u!", " you!");
        replacer.put(" u,", " you,");

        replacer.put(" i ", " I ");
        replacer.put(" i.", " I.");
        replacer.put(" i?", " I?");
        replacer.put(" i!", " I!");
        replacer.put(" i,", " I,");
        replacer.put(" im ", " I'm ");

        replacer.put(" r ", " are ");
        replacer.put(" r.", " are.");
        replacer.put(" r?", " are?");
        replacer.put(" r!", " are!");
        replacer.put(" r,", " are,");
    }
}
